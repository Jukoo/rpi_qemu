#!/usr/bin/python3 


# kndtb_ext=>  kernel image and device tree  blob extraction  
# MAINTAINER: jukoo  <funscript@outlook.fr> 
# Temporary mount   img file and extract   kernel img and Device Tree Blob
# and file descriptor img  dtb  [Divice Tree Blob] 
# quick python script to extract  data from  img file

import os 
import sys 
import subprocess 
import time
import shutil 
import logging as lg 

BOOTSECTOR        = 0X00001    # ->  here is the kernel  img and the divice Tree blob  
TARGET_DEVICE     ="/dev/"
MOUNT_TARGET      ="/mnt/"

DEFAULT_TMP_DIR   ="rpi"       #  by default  rpi is used  as default  folder  

#ERROR  
NO_F_IMG=0x0000f3 # 234 protocol  
ROOT_UID=0x000000  

# argument token iso file  image  linux  

if len(sys.argv)  == 0x000001  : 
   print("require file image  to continue process ...")
   print("usage {}  <linux file image>".format(sys.argv[0][2:]))
   sys.exit(3)

relative_path = "{}{}".format(MOUNT_TARGET ,DEFAULT_TMP_DIR) 

if len(sys.argv) is 0x000003 : 
    DEFAULT_TMP_DIR = sys.argv[0x000002]
    relative_path = "{}{}".format(MOUNT_TARGET ,DEFAULT_TMP_DIR)  


#REQUIRE  UID 0X00 FOR EXECUTE  
if os.geteuid() is not   ROOT_UID : 
    lg.critical("require root super user !")
    sys.exit(os.geteuid()) 


def exec_ops (cmd) : 
    shell_process = subprocess.Popen(cmd  , stdout=subprocess.PIPE  , shell=True)
    shell_pStat   = shell_process.wait() 
    return shell_pStat


# mount the MOUNT_TARGET  
mount_stack =  [
        "mkdir {}{}".format(MOUNT_TARGET,DEFAULT_TMP_DIR),  
        "losetup -f --show -P {}".format(sys.argv[0x001]) ,  
        "mount {dev}loop0p1 {mnt}{rpi_dir}".format(dev= TARGET_DEVICE ,mnt =MOUNT_TARGET , rpi_dir=DEFAULT_TMP_DIR )
        ] 

# unmount  MOUNT_TARGET    
unmount_stack = [ 
        "umount {}{}".format(MOUNT_TARGET, DEFAULT_TMP_DIR) , 
        "losetup -d  {}{}".format(TARGET_DEVICE,"loop0")
        ]
 
# check file image  containt  bootsector  
def  linux_Zimage_partition () : 
    if os.path.exists(sys.argv[0x001]) :
        zImg_partition  = os.popen("file {}".format(sys.argv[1])).read() 
        term="partition {}".format(BOOTSECTOR)  
        if term in zImg_partition :
            print ("GNU/Linux image found !")  
    else :
        lg.warning("no boot sector found")
        sys.exit(NO_F_IMG) 

def  chaining_cmd_stack_exec(relate_cmd_stack): 
    for layer in  relate_cmd_stack  :
        layer_chaine  = "sudo {}".format(layer) 
        time.sleep(0.5)
        assert (exec_ops(layer_chaine)) == 0x00 

def mount  (cmd_stacks) : 
    print("mounting  temporary  dir ")
    chaining_cmd_stack_exec(cmd_stacks)  
     
def unmount (cmd_stacks):
    print("closing temporary mounted dir")
    chaining_cmd_stack_exec(cmd_stacks)  

def  extract_iso_metdata ():
    print("extracting  metadata ...")
    root_temp  ="{}{}/".format(MOUNT_TARGET ,DEFAULT_TMP_DIR) 
    files  = [ _f  for _f in os.listdir(root_temp) ]        
    destination  = "{}/{}".format(os.getcwd() , DEFAULT_TMP_DIR)
    shutil.copytree(root_temp , destination)
"""
    if len(files)  is 0x00 : 
        lg.warning("no file  found on {}".format(root_temp))
        sys.exit(9)
"""


def remove():
    if os.path.exists(relative_path) : 
        cmd = "rm -r {}".format(relative_path)
        assert exec_ops(cmd) == 0x00

   

Order_Stack_Call = [
        linux_Zimage_partition(),  
        mount(mount_stack)     ,
        extract_iso_metdata()   ,
        unmount(unmount_stack)  ,
        remove()
        ]
    

def main () :
    for stack_exec in Order_Stack_Call : 
        stack_exec 
    
if  __name__=="__main__"  : main() 
